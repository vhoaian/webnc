{"version":3,"sources":["Square.jsx","Board.jsx","Game.jsx","index.js"],"names":["Square","props","className","onClick","style","highlight","background","color","value","Board","renderSquare","i","squares","key","rows","j","push","calculateWinner","lines","length","a","b","c","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","movesAreAscending","setMovesAreAscending","current","winner","moves","map","step","move","prevSquares","nextSquares","diffIndex","console","log","index","Math","floor","findLocation","x","y","desc","jumpTo","reverse","_squares","forEach","getWinnersSquares","isDrawnGame","_history","slice","concat","handleClick","reversed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf70676b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick} style={props.highlight ? {background: \"yellow\", color: \"red\"} : null}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nexport default function Board(props) {\r\n  const renderSquare = i => {\r\n    return (\r\n      <Square\r\n        value={props.squares[i]}\r\n        highlight={props.highlight[i]}\r\n        onClick={() => props.onClick(i)}\r\n        key={i}\r\n      />\r\n    );\r\n  }\r\n\r\n  const rows = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    const squares = [];\r\n    for (let j = 0; j < 3; j++) {\r\n      squares.push(renderSquare(i*3 + j))\r\n    }\r\n    rows.push(<div className=\"board-row\" key={i}>{squares}</div>);\r\n  }\r\n  return (\r\n    <div>{rows}</div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction getWinnersSquares(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  const _squares = Array(9).fill(false);\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      lines[i].forEach(index => _squares[index] = true);\r\n    }\r\n  }\r\n  return _squares;\r\n}\r\n\r\nfunction findLocation(prevSquares, nextSquares) {\r\n  let diffIndex;\r\n  console.log(prevSquares, nextSquares)\r\n  for (let index = 0; index < 9; index++) {\r\n    if (prevSquares.squares[index] !== nextSquares.squares[index])\r\n      diffIndex = index;\r\n  }\r\n  return [Math.floor(diffIndex / 3), diffIndex % 3];\r\n}\r\n\r\nfunction isDrawnGame(squares) {\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === null) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default function Game() {\r\n  const [history, setHistory] = useState([{\r\n        squares: Array(9).fill(null),\r\n      }]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [movesAreAscending, setMovesAreAscending] = useState(true);\r\n  \r\n  const handleClick = i => {\r\n    const _history = history.slice(0, stepNumber + 1);\r\n    const current = _history[_history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? 'X' : 'O';\r\n    \r\n    setHistory(_history.concat([{\r\n      squares: squares,\r\n    }]));\r\n    setStepNumber(_history.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  const jumpTo = step => {\r\n    setStepNumber(step);\r\n    setXIsNext((step % 2) === 0);\r\n  }\r\n\r\n  const toggleMovesOrder = () => setMovesAreAscending(!movesAreAscending);\r\n\r\n  const current = history[stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const [x, y] = move !== 0 ? findLocation(history[move-1], history[move]) : [null, null];\r\n    const desc = move ?\r\n      'Go to move #' + move + ` (${x}, ${y})` :\r\n      'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>{move === stepNumber ? <b>{desc}</b>: desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n  if (!movesAreAscending)\r\n    moves.reverse();\r\n\r\n  let status;\r\n  let highlight = Array(9).fill(false);\r\n  if (winner) {\r\n    status = 'Winner: ' + winner;\r\n    highlight = getWinnersSquares(current.squares);\r\n  } else {\r\n    if (isDrawnGame(current.squares))\r\n      status = 'Draw';\r\n    else\r\n      status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={(i) => handleClick(i)}\r\n          highlight={highlight}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>\r\n          {status}\r\n        </div>\r\n        <div>\r\n          <button onClick={() => toggleMovesOrder()}>\r\n            Toggle moves' order\r\n          </button>\r\n        </div>\r\n        {movesAreAscending ? <ol>{moves}</ol> : <ol reversed>{moves}</ol>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Game from \"./Game\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}